;buildInfoPackage: chisel3, version: 3.3.2, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit SystemTop : 
  module DataMemory : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<16>, dataRead : UInt<32>, flip writeEnable : UInt<1>, flip dataWrite : UInt<32>, flip testerEnable : UInt<1>, flip testerAddress : UInt<16>, testerDataRead : UInt<32>, flip testerWriteEnable : UInt<1>, flip testerDataWrite : UInt<32>}
    
    cmem memory : UInt<32>[65536] @[DataMemory.scala 18:20]
    when io.testerEnable : @[DataMemory.scala 22:24]
      read mport _T = memory[io.testerAddress], clock @[DataMemory.scala 24:37]
      io.testerDataRead <= _T @[DataMemory.scala 24:23]
      io.dataRead <= UInt<32>("h00") @[DataMemory.scala 26:17]
      when io.testerWriteEnable : @[DataMemory.scala 27:32]
        write mport _T_1 = memory[io.testerAddress], clock
        _T_1 <= io.testerDataWrite
        io.testerDataRead <= io.testerDataWrite @[DataMemory.scala 30:25]
        skip @[DataMemory.scala 27:32]
      skip @[DataMemory.scala 22:24]
    else : @[DataMemory.scala 32:16]
      read mport _T_2 = memory[io.address], clock @[DataMemory.scala 34:31]
      io.dataRead <= _T_2 @[DataMemory.scala 34:17]
      io.testerDataRead <= UInt<32>("h00") @[DataMemory.scala 36:23]
      when io.writeEnable : @[DataMemory.scala 37:26]
        write mport _T_3 = memory[io.address], clock
        _T_3 <= io.dataWrite
        io.dataRead <= io.dataWrite @[DataMemory.scala 40:19]
        skip @[DataMemory.scala 37:26]
      skip @[DataMemory.scala 32:16]
    
  module Accelerator : 
    input clock : Clock
    input reset : Reset
    output io : {flip start : UInt<1>, done : UInt<1>, address : UInt<16>, flip dataRead : UInt<32>, writeEnable : UInt<1>, dataWrite : UInt<32>}
    
    reg stateReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Accelerator.scala 18:25]
    reg stepReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Accelerator.scala 19:24]
    reg addressReg : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Accelerator.scala 23:27]
    reg dataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Accelerator.scala 24:24]
    reg cxReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[Accelerator.scala 26:22]
    reg cyReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[Accelerator.scala 27:22]
    reg xReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[Accelerator.scala 28:21]
    reg yReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[Accelerator.scala 29:21]
    io.writeEnable <= UInt<1>("h00") @[Accelerator.scala 31:18]
    io.address <= UInt<16>("h00") @[Accelerator.scala 32:14]
    io.dataWrite <= dataReg @[Accelerator.scala 33:16]
    io.done <= UInt<1>("h00") @[Accelerator.scala 34:11]
    node _T = eq(UInt<4>("h00"), stepReg) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      when io.start : @[Accelerator.scala 41:7]
        stepReg <= UInt<4>("h01") @[Accelerator.scala 42:17]
        addressReg <= UInt<32>("h00") @[Accelerator.scala 43:20]
        xReg <= asSInt(UInt<32>("h00")) @[Accelerator.scala 44:14]
        yReg <= asSInt(UInt<32>("h00")) @[Accelerator.scala 45:14]
        skip @[Accelerator.scala 41:7]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<4>("h06"), stepReg) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node _T_2 = geq(xReg, asSInt(UInt<32>("h00"))) @[Accelerator.scala 51:18]
        node _T_3 = lt(xReg, asSInt(UInt<32>("h014"))) @[Accelerator.scala 51:39]
        node _T_4 = and(_T_2, _T_3) @[Accelerator.scala 51:31]
        node _T_5 = geq(yReg, asSInt(UInt<32>("h00"))) @[Accelerator.scala 51:60]
        node _T_6 = and(_T_4, _T_5) @[Accelerator.scala 51:52]
        node _T_7 = lt(yReg, asSInt(UInt<32>("h014"))) @[Accelerator.scala 51:81]
        node _T_8 = and(_T_6, _T_7) @[Accelerator.scala 51:73]
        when _T_8 : @[Accelerator.scala 51:95]
          node _T_9 = mul(yReg, asSInt(UInt<32>("h014"))) @[Accelerator.scala 52:29]
          node _T_10 = add(_T_9, xReg) @[Accelerator.scala 52:42]
          node _T_11 = tail(_T_10, 1) @[Accelerator.scala 52:42]
          node _T_12 = asSInt(_T_11) @[Accelerator.scala 52:42]
          node _T_13 = asUInt(_T_12) @[Accelerator.scala 52:56]
          io.address <= _T_13 @[Accelerator.scala 52:20]
          dataReg <= io.dataRead @[Accelerator.scala 53:17]
          skip @[Accelerator.scala 51:95]
        else : @[Accelerator.scala 54:20]
          dataReg <= UInt<32>("h00") @[Accelerator.scala 55:17]
          skip @[Accelerator.scala 54:20]
        stepReg <= UInt<4>("h07") @[Accelerator.scala 58:15]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_14 = eq(UInt<4>("h07"), stepReg) @[Conditional.scala 37:30]
        when _T_14 : @[Conditional.scala 39:67]
          node _T_15 = eq(dataReg, UInt<32>("h00")) @[Accelerator.scala 62:21]
          when _T_15 : @[Accelerator.scala 62:36]
            stepReg <= UInt<4>("h08") @[Accelerator.scala 63:17]
            skip @[Accelerator.scala 62:36]
          else : @[Accelerator.scala 64:20]
            stepReg <= stateReg @[Accelerator.scala 65:17]
            skip @[Accelerator.scala 64:20]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_16 = eq(UInt<4>("h08"), stepReg) @[Conditional.scala 37:30]
          when _T_16 : @[Conditional.scala 39:67]
            node _T_17 = add(addressReg, UInt<16>("h0190")) @[Accelerator.scala 70:32]
            node _T_18 = tail(_T_17, 1) @[Accelerator.scala 70:32]
            io.address <= _T_18 @[Accelerator.scala 70:18]
            io.writeEnable <= UInt<1>("h01") @[Accelerator.scala 71:22]
            node _T_19 = eq(cxReg, asSInt(UInt<32>("h013"))) @[Accelerator.scala 73:19]
            when _T_19 : @[Accelerator.scala 73:35]
              node _T_20 = add(cyReg, asSInt(UInt<32>("h01"))) @[Accelerator.scala 74:24]
              node _T_21 = tail(_T_20, 1) @[Accelerator.scala 74:24]
              node _T_22 = asSInt(_T_21) @[Accelerator.scala 74:24]
              cyReg <= _T_22 @[Accelerator.scala 74:15]
              cxReg <= asSInt(UInt<32>("h00")) @[Accelerator.scala 75:15]
              skip @[Accelerator.scala 73:35]
            else : @[Accelerator.scala 76:20]
              node _T_23 = add(cxReg, asSInt(UInt<32>("h01"))) @[Accelerator.scala 77:24]
              node _T_24 = tail(_T_23, 1) @[Accelerator.scala 77:24]
              node _T_25 = asSInt(_T_24) @[Accelerator.scala 77:24]
              cxReg <= _T_25 @[Accelerator.scala 77:15]
              skip @[Accelerator.scala 76:20]
            node _T_26 = eq(addressReg, UInt<16>("h018f")) @[Accelerator.scala 80:24]
            when _T_26 : @[Accelerator.scala 80:41]
              stepReg <= UInt<4>("h09") @[Accelerator.scala 81:17]
              skip @[Accelerator.scala 80:41]
            else : @[Accelerator.scala 82:20]
              node _T_27 = add(addressReg, UInt<16>("h01")) @[Accelerator.scala 83:34]
              node _T_28 = tail(_T_27, 1) @[Accelerator.scala 83:34]
              addressReg <= _T_28 @[Accelerator.scala 83:20]
              stepReg <= UInt<4>("h01") @[Accelerator.scala 84:17]
              skip @[Accelerator.scala 82:20]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_29 = eq(UInt<4>("h01"), stepReg) @[Conditional.scala 37:30]
            when _T_29 : @[Conditional.scala 39:67]
              xReg <= cxReg @[Accelerator.scala 90:12]
              yReg <= cyReg @[Accelerator.scala 91:12]
              stepReg <= UInt<4>("h06") @[Accelerator.scala 93:15]
              stateReg <= UInt<4>("h02") @[Accelerator.scala 94:16]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_30 = eq(UInt<4>("h02"), stepReg) @[Conditional.scala 37:30]
              when _T_30 : @[Conditional.scala 39:67]
                xReg <= cxReg @[Accelerator.scala 98:12]
                node _T_31 = sub(cyReg, asSInt(UInt<32>("h01"))) @[Accelerator.scala 99:21]
                node _T_32 = tail(_T_31, 1) @[Accelerator.scala 99:21]
                node _T_33 = asSInt(_T_32) @[Accelerator.scala 99:21]
                yReg <= _T_33 @[Accelerator.scala 99:12]
                stepReg <= UInt<4>("h06") @[Accelerator.scala 101:15]
                stateReg <= UInt<4>("h03") @[Accelerator.scala 102:16]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_34 = eq(UInt<4>("h03"), stepReg) @[Conditional.scala 37:30]
                when _T_34 : @[Conditional.scala 39:67]
                  node _T_35 = sub(cxReg, asSInt(UInt<32>("h01"))) @[Accelerator.scala 106:21]
                  node _T_36 = tail(_T_35, 1) @[Accelerator.scala 106:21]
                  node _T_37 = asSInt(_T_36) @[Accelerator.scala 106:21]
                  xReg <= _T_37 @[Accelerator.scala 106:12]
                  yReg <= cyReg @[Accelerator.scala 107:12]
                  stepReg <= UInt<4>("h06") @[Accelerator.scala 109:15]
                  stateReg <= UInt<4>("h04") @[Accelerator.scala 110:16]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_38 = eq(UInt<4>("h04"), stepReg) @[Conditional.scala 37:30]
                  when _T_38 : @[Conditional.scala 39:67]
                    node _T_39 = add(cxReg, asSInt(UInt<32>("h01"))) @[Accelerator.scala 114:21]
                    node _T_40 = tail(_T_39, 1) @[Accelerator.scala 114:21]
                    node _T_41 = asSInt(_T_40) @[Accelerator.scala 114:21]
                    xReg <= _T_41 @[Accelerator.scala 114:12]
                    yReg <= cyReg @[Accelerator.scala 115:12]
                    stepReg <= UInt<4>("h06") @[Accelerator.scala 117:15]
                    stateReg <= UInt<4>("h05") @[Accelerator.scala 118:16]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_42 = eq(UInt<4>("h05"), stepReg) @[Conditional.scala 37:30]
                    when _T_42 : @[Conditional.scala 39:67]
                      xReg <= cxReg @[Accelerator.scala 122:12]
                      node _T_43 = add(cyReg, asSInt(UInt<32>("h01"))) @[Accelerator.scala 123:21]
                      node _T_44 = tail(_T_43, 1) @[Accelerator.scala 123:21]
                      node _T_45 = asSInt(_T_44) @[Accelerator.scala 123:21]
                      yReg <= _T_45 @[Accelerator.scala 123:12]
                      stepReg <= UInt<4>("h06") @[Accelerator.scala 125:15]
                      stateReg <= UInt<4>("h08") @[Accelerator.scala 126:16]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_46 = eq(UInt<4>("h09"), stepReg) @[Conditional.scala 37:30]
                      when _T_46 : @[Conditional.scala 39:67]
                        io.done <= UInt<1>("h01") @[Accelerator.scala 132:15]
                        stepReg <= UInt<4>("h09") @[Accelerator.scala 133:15]
                        skip @[Conditional.scala 39:67]
    
  module SystemTop : 
    input clock : Clock
    input reset : UInt<1>
    output io : {done : UInt<1>, flip start : UInt<1>, flip testerDataMemEnable : UInt<1>, flip testerDataMemAddress : UInt<16>, testerDataMemDataRead : UInt<32>, flip testerDataMemWriteEnable : UInt<1>, flip testerDataMemDataWrite : UInt<32>}
    
    inst dataMemory of DataMemory @[SystemTop.scala 18:26]
    dataMemory.clock <= clock
    dataMemory.reset <= reset
    inst accelerator of Accelerator @[SystemTop.scala 19:27]
    accelerator.clock <= clock
    accelerator.reset <= reset
    io.done <= accelerator.io.done @[SystemTop.scala 23:11]
    accelerator.io.start <= io.start @[SystemTop.scala 24:24]
    accelerator.io.dataRead <= dataMemory.io.dataRead @[SystemTop.scala 27:27]
    dataMemory.io.address <= accelerator.io.address @[SystemTop.scala 28:25]
    dataMemory.io.dataWrite <= accelerator.io.dataWrite @[SystemTop.scala 29:27]
    dataMemory.io.writeEnable <= accelerator.io.writeEnable @[SystemTop.scala 30:29]
    dataMemory.io.testerAddress <= io.testerDataMemAddress @[SystemTop.scala 33:31]
    io.testerDataMemDataRead <= dataMemory.io.testerDataRead @[SystemTop.scala 34:28]
    dataMemory.io.testerDataWrite <= io.testerDataMemDataWrite @[SystemTop.scala 35:33]
    dataMemory.io.testerEnable <= io.testerDataMemEnable @[SystemTop.scala 36:30]
    dataMemory.io.testerWriteEnable <= io.testerDataMemWriteEnable @[SystemTop.scala 37:35]
    
